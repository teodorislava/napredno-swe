/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.2.0.0 (NJsonSchema v10.1.2.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

export class AccountClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    register(model: CreateAccountVM): Promise<FileResponse | null> {
        let url_ = this.baseUrl + "/Account";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processRegister(_response);
        });
    }

    protected processRegister(response: Response): Promise<FileResponse | null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse | null>(<any>null);
    }

    login(model: LoginVM): Promise<FileResponse | null> {
        let url_ = this.baseUrl + "/Account";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processLogin(_response);
        });
    }

    protected processLogin(response: Response): Promise<FileResponse | null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse | null>(<any>null);
    }

    uvrede(uvreda: string | null | undefined): Promise<any[]> {
        let url_ = this.baseUrl + "/Account?";
        if (uvreda !== undefined)
            url_ += "uvreda=" + encodeURIComponent("" + uvreda) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "DELETE",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUvrede(_response);
        });
    }

    protected processUvrede(response: Response): Promise<any[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(item);
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any[]>(<any>null);
    }

    isUserOrganisation(): Promise<boolean> {
        let url_ = this.baseUrl + "/Account/isUserOrganisation";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processIsUserOrganisation(_response);
        });
    }

    protected processIsUserOrganisation(response: Response): Promise<boolean> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<boolean>(<any>null);
    }
}

export class BoughtClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    getBoughts(): Promise<Bought[]> {
        let url_ = this.baseUrl + "/api/Bought";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetBoughts(_response);
        });
    }

    protected processGetBoughts(response: Response): Promise<Bought[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Bought.fromJS(item));
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Bought[]>(<any>null);
    }

    postBought(value: Bought): Promise<void> {
        let url_ = this.baseUrl + "/api/Bought";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(value);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPostBought(_response);
        });
    }

    protected processPostBought(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }

    getBoughtById(id: number): Promise<Bought> {
        let url_ = this.baseUrl + "/api/Bought/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetBoughtById(_response);
        });
    }

    protected processGetBoughtById(response: Response): Promise<Bought> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Bought.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Bought>(<any>null);
    }

    putBought(id: number, value: Bought): Promise<void> {
        let url_ = this.baseUrl + "/api/Bought/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(value);

        let options_ = <RequestInit>{
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPutBought(_response);
        });
    }

    protected processPutBought(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }

    deleteBoughtById(id: number): Promise<void> {
        let url_ = this.baseUrl + "/api/Bought/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "DELETE",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteBoughtById(_response);
        });
    }

    protected processDeleteBoughtById(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }
}

export class OffersClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    getOffers(): Promise<Offer[]> {
        let url_ = this.baseUrl + "/api/Offers";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetOffers(_response);
        });
    }

    protected processGetOffers(response: Response): Promise<Offer[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Offer.fromJS(item));
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Offer[]>(<any>null);
    }

    postOffer(value: Offer): Promise<void> {
        let url_ = this.baseUrl + "/api/Offers";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(value);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPostOffer(_response);
        });
    }

    protected processPostOffer(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }

    getOfferById(id: number): Promise<Offer> {
        let url_ = this.baseUrl + "/api/Offers/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetOfferById(_response);
        });
    }

    protected processGetOfferById(response: Response): Promise<Offer> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Offer.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Offer>(<any>null);
    }

    putOffer(id: number, value: Offer): Promise<void> {
        let url_ = this.baseUrl + "/api/Offers/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(value);

        let options_ = <RequestInit>{
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPutOffer(_response);
        });
    }

    protected processPutOffer(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }

    deleteOfferById(id: number): Promise<void> {
        let url_ = this.baseUrl + "/api/Offers/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "DELETE",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteOfferById(_response);
        });
    }

    protected processDeleteOfferById(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }
}

export class OrganisationsClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    getOrganisations(): Promise<Organisation[]> {
        let url_ = this.baseUrl + "/api/Organisations";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetOrganisations(_response);
        });
    }

    protected processGetOrganisations(response: Response): Promise<Organisation[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Organisation.fromJS(item));
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Organisation[]>(<any>null);
    }

    postOrganisation(value: Organisation): Promise<void> {
        let url_ = this.baseUrl + "/api/Organisations";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(value);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPostOrganisation(_response);
        });
    }

    protected processPostOrganisation(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }

    getOrganisationById(id: number): Promise<Organisation> {
        let url_ = this.baseUrl + "/api/Organisations/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetOrganisationById(_response);
        });
    }

    protected processGetOrganisationById(response: Response): Promise<Organisation> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Organisation.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Organisation>(<any>null);
    }

    putOrganisation(id: number, value: Organisation): Promise<void> {
        let url_ = this.baseUrl + "/api/Organisations/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(value);

        let options_ = <RequestInit>{
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPutOrganisation(_response);
        });
    }

    protected processPutOrganisation(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }

    deleteOrganisationById(id: number): Promise<void> {
        let url_ = this.baseUrl + "/api/Organisations/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "DELETE",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteOrganisationById(_response);
        });
    }

    protected processDeleteOrganisationById(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }
}

export class TicketBuyersClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    getUsers(): Promise<TicketBuyer[]> {
        let url_ = this.baseUrl + "/api/TicketBuyers";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetUsers(_response);
        });
    }

    protected processGetUsers(response: Response): Promise<TicketBuyer[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(TicketBuyer.fromJS(item));
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<TicketBuyer[]>(<any>null);
    }

    postUser(value: TicketBuyer): Promise<void> {
        let url_ = this.baseUrl + "/api/TicketBuyers";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(value);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPostUser(_response);
        });
    }

    protected processPostUser(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }

    getUserById(id: number): Promise<TicketBuyer> {
        let url_ = this.baseUrl + "/api/TicketBuyers/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetUserById(_response);
        });
    }

    protected processGetUserById(response: Response): Promise<TicketBuyer> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = TicketBuyer.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<TicketBuyer>(<any>null);
    }

    putUser(id: number, value: TicketBuyer): Promise<void> {
        let url_ = this.baseUrl + "/api/TicketBuyers/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(value);

        let options_ = <RequestInit>{
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPutUser(_response);
        });
    }

    protected processPutUser(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }

    deleteUserById(id: number): Promise<void> {
        let url_ = this.baseUrl + "/api/TicketBuyers/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "DELETE",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteUserById(_response);
        });
    }

    protected processDeleteUserById(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }
}

export class TicketsClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    getTickets(): Promise<TicketSummaryVM[]> {
        let url_ = this.baseUrl + "/api/Tickets";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetTickets(_response);
        });
    }

    protected processGetTickets(response: Response): Promise<TicketSummaryVM[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(TicketSummaryVM.fromJS(item));
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<TicketSummaryVM[]>(<any>null);
    }

    postTicket(value: TicketCreationVM): Promise<FileResponse | null> {
        let url_ = this.baseUrl + "/api/Tickets";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(value);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPostTicket(_response);
        });
    }

    protected processPostTicket(response: Response): Promise<FileResponse | null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse | null>(<any>null);
    }

    getTicketById(id: number): Promise<TicketDetailsVM> {
        let url_ = this.baseUrl + "/api/Tickets/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetTicketById(_response);
        });
    }

    protected processGetTicketById(response: Response): Promise<TicketDetailsVM> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = TicketDetailsVM.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<TicketDetailsVM>(<any>null);
    }

    putTicket(id: number, value: Ticket): Promise<TicketBuyer> {
        let url_ = this.baseUrl + "/api/Tickets/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(value);

        let options_ = <RequestInit>{
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPutTicket(_response);
        });
    }

    protected processPutTicket(response: Response): Promise<TicketBuyer> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = TicketBuyer.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<TicketBuyer>(<any>null);
    }

    deleteTicketById(id: number): Promise<void> {
        let url_ = this.baseUrl + "/api/Tickets/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "DELETE",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteTicketById(_response);
        });
    }

    protected processDeleteTicketById(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }
}

export class UserClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    getUser(): Promise<UserVM> {
        let url_ = this.baseUrl + "/User";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetUser(_response);
        });
    }

    protected processGetUser(response: Response): Promise<UserVM> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserVM.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<UserVM>(<any>null);
    }
}

export class WeatherForecastClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    get(): Promise<WeatherForecast[]> {
        let url_ = this.baseUrl + "/WeatherForecast";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGet(_response);
        });
    }

    protected processGet(response: Response): Promise<WeatherForecast[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(WeatherForecast.fromJS(item));
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<WeatherForecast[]>(<any>null);
    }
}

export class CreateAccountVM implements ICreateAccountVM {
    email?: string | undefined;
    password?: string | undefined;
    isOrganisation!: boolean;
    user?: CreateAccountUserVM | undefined;
    organisation?: CreateAccountOrganisationVM | undefined;

    constructor(data?: ICreateAccountVM) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.email = _data["email"];
            this.password = _data["password"];
            this.isOrganisation = _data["isOrganisation"];
            this.user = _data["user"] ? CreateAccountUserVM.fromJS(_data["user"]) : <any>undefined;
            this.organisation = _data["organisation"] ? CreateAccountOrganisationVM.fromJS(_data["organisation"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CreateAccountVM {
        data = typeof data === 'object' ? data : {};
        let result = new CreateAccountVM();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email;
        data["password"] = this.password;
        data["isOrganisation"] = this.isOrganisation;
        data["user"] = this.user ? this.user.toJSON() : <any>undefined;
        data["organisation"] = this.organisation ? this.organisation.toJSON() : <any>undefined;
        return data; 
    }
}

export interface ICreateAccountVM {
    email?: string | undefined;
    password?: string | undefined;
    isOrganisation: boolean;
    user?: CreateAccountUserVM | undefined;
    organisation?: CreateAccountOrganisationVM | undefined;
}

export class CreateAccountUserVM implements ICreateAccountUserVM {
    firstName?: string | undefined;
    lastName?: string | undefined;
    birthdate?: Date | undefined;
    gender?: string | undefined;

    constructor(data?: ICreateAccountUserVM) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.birthdate = _data["birthdate"] ? new Date(_data["birthdate"].toString()) : <any>undefined;
            this.gender = _data["gender"];
        }
    }

    static fromJS(data: any): CreateAccountUserVM {
        data = typeof data === 'object' ? data : {};
        let result = new CreateAccountUserVM();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["birthdate"] = this.birthdate ? this.birthdate.toISOString() : <any>undefined;
        data["gender"] = this.gender;
        return data; 
    }
}

export interface ICreateAccountUserVM {
    firstName?: string | undefined;
    lastName?: string | undefined;
    birthdate?: Date | undefined;
    gender?: string | undefined;
}

export class CreateAccountOrganisationVM implements ICreateAccountOrganisationVM {
    name?: string | undefined;
    incorporatedDate?: Date | undefined;
    description?: string | undefined;
    phoneNumber?: string | undefined;
    addressLine1?: string | undefined;
    addressLine2?: string | undefined;
    addressLine3?: string | undefined;
    country?: string | undefined;
    state?: string | undefined;
    city?: string | undefined;
    zipCode?: string | undefined;

    constructor(data?: ICreateAccountOrganisationVM) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.incorporatedDate = _data["incorporatedDate"] ? new Date(_data["incorporatedDate"].toString()) : <any>undefined;
            this.description = _data["description"];
            this.phoneNumber = _data["phoneNumber"];
            this.addressLine1 = _data["addressLine1"];
            this.addressLine2 = _data["addressLine2"];
            this.addressLine3 = _data["addressLine3"];
            this.country = _data["country"];
            this.state = _data["state"];
            this.city = _data["city"];
            this.zipCode = _data["zipCode"];
        }
    }

    static fromJS(data: any): CreateAccountOrganisationVM {
        data = typeof data === 'object' ? data : {};
        let result = new CreateAccountOrganisationVM();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["incorporatedDate"] = this.incorporatedDate ? this.incorporatedDate.toISOString() : <any>undefined;
        data["description"] = this.description;
        data["phoneNumber"] = this.phoneNumber;
        data["addressLine1"] = this.addressLine1;
        data["addressLine2"] = this.addressLine2;
        data["addressLine3"] = this.addressLine3;
        data["country"] = this.country;
        data["state"] = this.state;
        data["city"] = this.city;
        data["zipCode"] = this.zipCode;
        return data; 
    }
}

export interface ICreateAccountOrganisationVM {
    name?: string | undefined;
    incorporatedDate?: Date | undefined;
    description?: string | undefined;
    phoneNumber?: string | undefined;
    addressLine1?: string | undefined;
    addressLine2?: string | undefined;
    addressLine3?: string | undefined;
    country?: string | undefined;
    state?: string | undefined;
    city?: string | undefined;
    zipCode?: string | undefined;
}

export class LoginVM implements ILoginVM {
    username?: string | undefined;
    password?: string | undefined;

    constructor(data?: ILoginVM) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.username = _data["username"];
            this.password = _data["password"];
        }
    }

    static fromJS(data: any): LoginVM {
        data = typeof data === 'object' ? data : {};
        let result = new LoginVM();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["username"] = this.username;
        data["password"] = this.password;
        return data; 
    }
}

export interface ILoginVM {
    username?: string | undefined;
    password?: string | undefined;
}

export class Bought implements IBought {
    id!: number;
    price!: number;
    purchasedOn!: Date;
    additionalInformation1?: string | undefined;
    additionalInformation2?: string | undefined;
    additionalInformation3?: string | undefined;
    user?: TicketBuyer | undefined;
    ticket?: Ticket | undefined;

    constructor(data?: IBought) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.price = _data["price"];
            this.purchasedOn = _data["purchasedOn"] ? new Date(_data["purchasedOn"].toString()) : <any>undefined;
            this.additionalInformation1 = _data["additionalInformation1"];
            this.additionalInformation2 = _data["additionalInformation2"];
            this.additionalInformation3 = _data["additionalInformation3"];
            this.user = _data["user"] ? TicketBuyer.fromJS(_data["user"]) : <any>undefined;
            this.ticket = _data["ticket"] ? Ticket.fromJS(_data["ticket"]) : <any>undefined;
        }
    }

    static fromJS(data: any): Bought {
        data = typeof data === 'object' ? data : {};
        let result = new Bought();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["price"] = this.price;
        data["purchasedOn"] = this.purchasedOn ? this.purchasedOn.toISOString() : <any>undefined;
        data["additionalInformation1"] = this.additionalInformation1;
        data["additionalInformation2"] = this.additionalInformation2;
        data["additionalInformation3"] = this.additionalInformation3;
        data["user"] = this.user ? this.user.toJSON() : <any>undefined;
        data["ticket"] = this.ticket ? this.ticket.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IBought {
    id: number;
    price: number;
    purchasedOn: Date;
    additionalInformation1?: string | undefined;
    additionalInformation2?: string | undefined;
    additionalInformation3?: string | undefined;
    user?: TicketBuyer | undefined;
    ticket?: Ticket | undefined;
}

export class TicketBuyer implements ITicketBuyer {
    id!: number;
    firstName?: string | undefined;
    lastName?: string | undefined;
    birthdate?: Date | undefined;
    gender?: string | undefined;
    email?: string | undefined;
    dateRegistered!: Date;
    bought?: Bought[] | undefined;

    constructor(data?: ITicketBuyer) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.birthdate = _data["birthdate"] ? new Date(_data["birthdate"].toString()) : <any>undefined;
            this.gender = _data["gender"];
            this.email = _data["email"];
            this.dateRegistered = _data["dateRegistered"] ? new Date(_data["dateRegistered"].toString()) : <any>undefined;
            if (Array.isArray(_data["bought"])) {
                this.bought = [] as any;
                for (let item of _data["bought"])
                    this.bought!.push(Bought.fromJS(item));
            }
        }
    }

    static fromJS(data: any): TicketBuyer {
        data = typeof data === 'object' ? data : {};
        let result = new TicketBuyer();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["birthdate"] = this.birthdate ? this.birthdate.toISOString() : <any>undefined;
        data["gender"] = this.gender;
        data["email"] = this.email;
        data["dateRegistered"] = this.dateRegistered ? this.dateRegistered.toISOString() : <any>undefined;
        if (Array.isArray(this.bought)) {
            data["bought"] = [];
            for (let item of this.bought)
                data["bought"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ITicketBuyer {
    id: number;
    firstName?: string | undefined;
    lastName?: string | undefined;
    birthdate?: Date | undefined;
    gender?: string | undefined;
    email?: string | undefined;
    dateRegistered: Date;
    bought?: Bought[] | undefined;
}

export class Ticket implements ITicket {
    id!: number;
    name?: string | undefined;
    type?: string | undefined;
    note?: string | undefined;
    offers?: Offer[] | undefined;
    bought?: Bought[] | undefined;
    organisation?: Organisation | undefined;

    constructor(data?: ITicket) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.type = _data["type"];
            this.note = _data["note"];
            if (Array.isArray(_data["offers"])) {
                this.offers = [] as any;
                for (let item of _data["offers"])
                    this.offers!.push(Offer.fromJS(item));
            }
            if (Array.isArray(_data["bought"])) {
                this.bought = [] as any;
                for (let item of _data["bought"])
                    this.bought!.push(Bought.fromJS(item));
            }
            this.organisation = _data["organisation"] ? Organisation.fromJS(_data["organisation"]) : <any>undefined;
        }
    }

    static fromJS(data: any): Ticket {
        data = typeof data === 'object' ? data : {};
        let result = new Ticket();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["type"] = this.type;
        data["note"] = this.note;
        if (Array.isArray(this.offers)) {
            data["offers"] = [];
            for (let item of this.offers)
                data["offers"].push(item.toJSON());
        }
        if (Array.isArray(this.bought)) {
            data["bought"] = [];
            for (let item of this.bought)
                data["bought"].push(item.toJSON());
        }
        data["organisation"] = this.organisation ? this.organisation.toJSON() : <any>undefined;
        return data; 
    }
}

export interface ITicket {
    id: number;
    name?: string | undefined;
    type?: string | undefined;
    note?: string | undefined;
    offers?: Offer[] | undefined;
    bought?: Bought[] | undefined;
    organisation?: Organisation | undefined;
}

export class Offer implements IOffer {
    id!: number;
    name?: string | undefined;
    fullPrice!: number;
    capacity!: number;
    current!: number;
    validFrom!: Date;
    validTo!: Date;
    description?: string | undefined;
    discount!: boolean;
    discountAmount!: number;
    ticket?: Ticket | undefined;

    constructor(data?: IOffer) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.fullPrice = _data["fullPrice"];
            this.capacity = _data["capacity"];
            this.current = _data["current"];
            this.validFrom = _data["validFrom"] ? new Date(_data["validFrom"].toString()) : <any>undefined;
            this.validTo = _data["validTo"] ? new Date(_data["validTo"].toString()) : <any>undefined;
            this.description = _data["description"];
            this.discount = _data["discount"];
            this.discountAmount = _data["discountAmount"];
            this.ticket = _data["ticket"] ? Ticket.fromJS(_data["ticket"]) : <any>undefined;
        }
    }

    static fromJS(data: any): Offer {
        data = typeof data === 'object' ? data : {};
        let result = new Offer();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["fullPrice"] = this.fullPrice;
        data["capacity"] = this.capacity;
        data["current"] = this.current;
        data["validFrom"] = this.validFrom ? this.validFrom.toISOString() : <any>undefined;
        data["validTo"] = this.validTo ? this.validTo.toISOString() : <any>undefined;
        data["description"] = this.description;
        data["discount"] = this.discount;
        data["discountAmount"] = this.discountAmount;
        data["ticket"] = this.ticket ? this.ticket.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IOffer {
    id: number;
    name?: string | undefined;
    fullPrice: number;
    capacity: number;
    current: number;
    validFrom: Date;
    validTo: Date;
    description?: string | undefined;
    discount: boolean;
    discountAmount: number;
    ticket?: Ticket | undefined;
}

export class Organisation implements IOrganisation {
    id!: number;
    name?: string | undefined;
    incorporatedDate?: Date | undefined;
    description?: string | undefined;
    dateRegistered!: Date;
    phoneNumber?: string | undefined;
    email?: string | undefined;
    addressLine1?: string | undefined;
    addressLine2?: string | undefined;
    addressLine3?: string | undefined;
    country?: string | undefined;
    state?: string | undefined;
    city?: string | undefined;
    zipCode?: string | undefined;
    turnover!: number;
    tickets?: Ticket[] | undefined;

    constructor(data?: IOrganisation) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.incorporatedDate = _data["incorporatedDate"] ? new Date(_data["incorporatedDate"].toString()) : <any>undefined;
            this.description = _data["description"];
            this.dateRegistered = _data["dateRegistered"] ? new Date(_data["dateRegistered"].toString()) : <any>undefined;
            this.phoneNumber = _data["phoneNumber"];
            this.email = _data["email"];
            this.addressLine1 = _data["addressLine1"];
            this.addressLine2 = _data["addressLine2"];
            this.addressLine3 = _data["addressLine3"];
            this.country = _data["country"];
            this.state = _data["state"];
            this.city = _data["city"];
            this.zipCode = _data["zipCode"];
            this.turnover = _data["turnover"];
            if (Array.isArray(_data["tickets"])) {
                this.tickets = [] as any;
                for (let item of _data["tickets"])
                    this.tickets!.push(Ticket.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Organisation {
        data = typeof data === 'object' ? data : {};
        let result = new Organisation();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["incorporatedDate"] = this.incorporatedDate ? this.incorporatedDate.toISOString() : <any>undefined;
        data["description"] = this.description;
        data["dateRegistered"] = this.dateRegistered ? this.dateRegistered.toISOString() : <any>undefined;
        data["phoneNumber"] = this.phoneNumber;
        data["email"] = this.email;
        data["addressLine1"] = this.addressLine1;
        data["addressLine2"] = this.addressLine2;
        data["addressLine3"] = this.addressLine3;
        data["country"] = this.country;
        data["state"] = this.state;
        data["city"] = this.city;
        data["zipCode"] = this.zipCode;
        data["turnover"] = this.turnover;
        if (Array.isArray(this.tickets)) {
            data["tickets"] = [];
            for (let item of this.tickets)
                data["tickets"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IOrganisation {
    id: number;
    name?: string | undefined;
    incorporatedDate?: Date | undefined;
    description?: string | undefined;
    dateRegistered: Date;
    phoneNumber?: string | undefined;
    email?: string | undefined;
    addressLine1?: string | undefined;
    addressLine2?: string | undefined;
    addressLine3?: string | undefined;
    country?: string | undefined;
    state?: string | undefined;
    city?: string | undefined;
    zipCode?: string | undefined;
    turnover: number;
    tickets?: Ticket[] | undefined;
}

export class TicketSummaryVM implements ITicketSummaryVM {
    id!: number;
    name?: string | undefined;
    type?: string | undefined;
    note?: string | undefined;
    organisationName?: string | undefined;

    constructor(data?: ITicketSummaryVM) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.type = _data["type"];
            this.note = _data["note"];
            this.organisationName = _data["organisationName"];
        }
    }

    static fromJS(data: any): TicketSummaryVM {
        data = typeof data === 'object' ? data : {};
        let result = new TicketSummaryVM();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["type"] = this.type;
        data["note"] = this.note;
        data["organisationName"] = this.organisationName;
        return data; 
    }
}

export interface ITicketSummaryVM {
    id: number;
    name?: string | undefined;
    type?: string | undefined;
    note?: string | undefined;
    organisationName?: string | undefined;
}

export class TicketDetailsVM implements ITicketDetailsVM {
    name?: string | undefined;
    type?: string | undefined;
    note?: string | undefined;
    organisationName?: string | undefined;
    price!: number;
    fullPrice!: number;
    discount!: number;
    numberSold!: number;
    numberLeft!: number;
    validTo!: Date;
    validFrom!: Date;

    constructor(data?: ITicketDetailsVM) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.type = _data["type"];
            this.note = _data["note"];
            this.organisationName = _data["organisationName"];
            this.price = _data["price"];
            this.fullPrice = _data["fullPrice"];
            this.discount = _data["discount"];
            this.numberSold = _data["numberSold"];
            this.numberLeft = _data["numberLeft"];
            this.validTo = _data["validTo"] ? new Date(_data["validTo"].toString()) : <any>undefined;
            this.validFrom = _data["validFrom"] ? new Date(_data["validFrom"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): TicketDetailsVM {
        data = typeof data === 'object' ? data : {};
        let result = new TicketDetailsVM();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["type"] = this.type;
        data["note"] = this.note;
        data["organisationName"] = this.organisationName;
        data["price"] = this.price;
        data["fullPrice"] = this.fullPrice;
        data["discount"] = this.discount;
        data["numberSold"] = this.numberSold;
        data["numberLeft"] = this.numberLeft;
        data["validTo"] = this.validTo ? this.validTo.toISOString() : <any>undefined;
        data["validFrom"] = this.validFrom ? this.validFrom.toISOString() : <any>undefined;
        return data; 
    }
}

export interface ITicketDetailsVM {
    name?: string | undefined;
    type?: string | undefined;
    note?: string | undefined;
    organisationName?: string | undefined;
    price: number;
    fullPrice: number;
    discount: number;
    numberSold: number;
    numberLeft: number;
    validTo: Date;
    validFrom: Date;
}

export class TicketCreationVM implements ITicketCreationVM {
    name?: string | undefined;
    type?: string | undefined;
    note?: string | undefined;
    fullPrice!: number;
    capacity!: number;
    validFrom!: Date;
    validTo!: Date;
    description?: string | undefined;
    discount!: number;

    constructor(data?: ITicketCreationVM) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.type = _data["type"];
            this.note = _data["note"];
            this.fullPrice = _data["fullPrice"];
            this.capacity = _data["capacity"];
            this.validFrom = _data["validFrom"] ? new Date(_data["validFrom"].toString()) : <any>undefined;
            this.validTo = _data["validTo"] ? new Date(_data["validTo"].toString()) : <any>undefined;
            this.description = _data["description"];
            this.discount = _data["discount"];
        }
    }

    static fromJS(data: any): TicketCreationVM {
        data = typeof data === 'object' ? data : {};
        let result = new TicketCreationVM();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["type"] = this.type;
        data["note"] = this.note;
        data["fullPrice"] = this.fullPrice;
        data["capacity"] = this.capacity;
        data["validFrom"] = this.validFrom ? this.validFrom.toISOString() : <any>undefined;
        data["validTo"] = this.validTo ? this.validTo.toISOString() : <any>undefined;
        data["description"] = this.description;
        data["discount"] = this.discount;
        return data; 
    }
}

export interface ITicketCreationVM {
    name?: string | undefined;
    type?: string | undefined;
    note?: string | undefined;
    fullPrice: number;
    capacity: number;
    validFrom: Date;
    validTo: Date;
    description?: string | undefined;
    discount: number;
}

export class UserVM implements IUserVM {
    isOrganisation!: boolean;
    email?: string | undefined;
    registeredOn!: Date;
    organisation?: OrganisationVM | undefined;
    ticketBuyer?: TicketBuyerVM | undefined;

    constructor(data?: IUserVM) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isOrganisation = _data["isOrganisation"];
            this.email = _data["email"];
            this.registeredOn = _data["registeredOn"] ? new Date(_data["registeredOn"].toString()) : <any>undefined;
            this.organisation = _data["organisation"] ? OrganisationVM.fromJS(_data["organisation"]) : <any>undefined;
            this.ticketBuyer = _data["ticketBuyer"] ? TicketBuyerVM.fromJS(_data["ticketBuyer"]) : <any>undefined;
        }
    }

    static fromJS(data: any): UserVM {
        data = typeof data === 'object' ? data : {};
        let result = new UserVM();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isOrganisation"] = this.isOrganisation;
        data["email"] = this.email;
        data["registeredOn"] = this.registeredOn ? this.registeredOn.toISOString() : <any>undefined;
        data["organisation"] = this.organisation ? this.organisation.toJSON() : <any>undefined;
        data["ticketBuyer"] = this.ticketBuyer ? this.ticketBuyer.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IUserVM {
    isOrganisation: boolean;
    email?: string | undefined;
    registeredOn: Date;
    organisation?: OrganisationVM | undefined;
    ticketBuyer?: TicketBuyerVM | undefined;
}

export class OrganisationVM implements IOrganisationVM {
    name?: string | undefined;
    incorporatedDate?: Date | undefined;
    description?: string | undefined;
    phoneNumber?: string | undefined;
    addressLine1?: string | undefined;
    addressLine2?: string | undefined;
    addressLine3?: string | undefined;
    country?: string | undefined;
    state?: string | undefined;
    city?: string | undefined;
    zipCode?: string | undefined;
    turnover!: number;
    offersCount!: number;

    constructor(data?: IOrganisationVM) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.incorporatedDate = _data["incorporatedDate"] ? new Date(_data["incorporatedDate"].toString()) : <any>undefined;
            this.description = _data["description"];
            this.phoneNumber = _data["phoneNumber"];
            this.addressLine1 = _data["addressLine1"];
            this.addressLine2 = _data["addressLine2"];
            this.addressLine3 = _data["addressLine3"];
            this.country = _data["country"];
            this.state = _data["state"];
            this.city = _data["city"];
            this.zipCode = _data["zipCode"];
            this.turnover = _data["turnover"];
            this.offersCount = _data["offersCount"];
        }
    }

    static fromJS(data: any): OrganisationVM {
        data = typeof data === 'object' ? data : {};
        let result = new OrganisationVM();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["incorporatedDate"] = this.incorporatedDate ? this.incorporatedDate.toISOString() : <any>undefined;
        data["description"] = this.description;
        data["phoneNumber"] = this.phoneNumber;
        data["addressLine1"] = this.addressLine1;
        data["addressLine2"] = this.addressLine2;
        data["addressLine3"] = this.addressLine3;
        data["country"] = this.country;
        data["state"] = this.state;
        data["city"] = this.city;
        data["zipCode"] = this.zipCode;
        data["turnover"] = this.turnover;
        data["offersCount"] = this.offersCount;
        return data; 
    }
}

export interface IOrganisationVM {
    name?: string | undefined;
    incorporatedDate?: Date | undefined;
    description?: string | undefined;
    phoneNumber?: string | undefined;
    addressLine1?: string | undefined;
    addressLine2?: string | undefined;
    addressLine3?: string | undefined;
    country?: string | undefined;
    state?: string | undefined;
    city?: string | undefined;
    zipCode?: string | undefined;
    turnover: number;
    offersCount: number;
}

export class TicketBuyerVM implements ITicketBuyerVM {
    firstName?: string | undefined;
    lastName?: string | undefined;
    birthdate?: Date | undefined;
    gender?: string | undefined;
    boughtCount!: number;

    constructor(data?: ITicketBuyerVM) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.birthdate = _data["birthdate"] ? new Date(_data["birthdate"].toString()) : <any>undefined;
            this.gender = _data["gender"];
            this.boughtCount = _data["boughtCount"];
        }
    }

    static fromJS(data: any): TicketBuyerVM {
        data = typeof data === 'object' ? data : {};
        let result = new TicketBuyerVM();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["birthdate"] = this.birthdate ? this.birthdate.toISOString() : <any>undefined;
        data["gender"] = this.gender;
        data["boughtCount"] = this.boughtCount;
        return data; 
    }
}

export interface ITicketBuyerVM {
    firstName?: string | undefined;
    lastName?: string | undefined;
    birthdate?: Date | undefined;
    gender?: string | undefined;
    boughtCount: number;
}

export class WeatherForecast implements IWeatherForecast {
    date!: Date;
    temperatureC!: number;
    temperatureF!: number;
    summary?: string | undefined;

    constructor(data?: IWeatherForecast) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
            this.temperatureC = _data["temperatureC"];
            this.temperatureF = _data["temperatureF"];
            this.summary = _data["summary"];
        }
    }

    static fromJS(data: any): WeatherForecast {
        data = typeof data === 'object' ? data : {};
        let result = new WeatherForecast();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["temperatureC"] = this.temperatureC;
        data["temperatureF"] = this.temperatureF;
        data["summary"] = this.summary;
        return data; 
    }
}

export interface IWeatherForecast {
    date: Date;
    temperatureC: number;
    temperatureF: number;
    summary?: string | undefined;
}

export interface FileResponse {
    data: Blob;
    status: number;
    fileName?: string;
    headers?: { [name: string]: any };
}

export class ApiException extends Error {
    message: string;
    status: number; 
    response: string; 
    headers: { [key: string]: any; };
    result: any; 

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}